# This workflow will build a Spring Boot project into a Docker image, push the image to Docker Hub, and then deploy it to an Azure VM by pulling the latest image and running the container.
# If the container is already running, it will be stopped and removed before running the new one.

name: Build and Deploy

on:
  workflow_dispatch:  # Allows the workflow to be triggered manually

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      CONTAINER_NAME: capstone-backend-server

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Make mvnw executable
        run: chmod +x mvnw

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.CONTAINER_NAME }}:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.CONTAINER_NAME }}:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    env:
      CONTAINER_NAME: capstone-backend-server

    steps:
      - name: Install SSH client
        run: sudo apt-get install -y sshpass

      - name: Deploy to Azure VM
        run: |
          sshpass -p "${{ secrets.AZURE_VM_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_IP }} << EOF
          # Stop and remove the running container if it exists
          if [ \$(sudo docker ps -q -f name=${{ env.CONTAINER_NAME }}) ]; then
            sudo docker stop ${{ env.CONTAINER_NAME }}
            sudo docker rm ${{ env.CONTAINER_NAME }}
          fi
          
          # Pull the latest Docker image
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.CONTAINER_NAME }}:latest
          
          # Run a new container with the latest image
          sudo docker run -d --name ${{ env.CONTAINER_NAME }} -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/${{ env.CONTAINER_NAME }}:latest
          EOF
        env:
          AZURE_VM_PASSWORD: ${{ secrets.AZURE_VM_PASSWORD }}
          AZURE_VM_USERNAME: ${{ secrets.AZURE_VM_USERNAME }}
          AZURE_VM_IP: ${{ secrets.AZURE_VM_IP }}
